package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"log"

	"github.com/tahminator/go-example/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, newTodo model.NewTodo) (*model.Todo, error) {
	r.databaseBuilder()
	r.repositoryBuilder()

	todo, err := r.todoRepository.CreateTodo(ctx, &newTodo)
	if err != nil {
		log.Fatalf("Failed to create new todo: %v", err)
	}

	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, todo model.InputTodo) (*model.Todo, error) {
	r.databaseBuilder()
	r.repositoryBuilder()

	newTodo, err := r.todoRepository.UpdateTodo(ctx, &todo)
	if err != nil {
		log.Fatalf("failed to update todo: %v", err)
	}

	return newTodo, err
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, todoID string) (*model.Todo, error) {
	r.databaseBuilder()
	r.repositoryBuilder()

	todo, err := r.todoRepository.DeleteTodo(ctx, todoID)
	if err != nil {
		log.Fatalf("failed to delete todo: %v", err)
	}

	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	r.databaseBuilder()
	r.repositoryBuilder()

	todos, err := r.todoRepository.FindTodos(ctx)
	if err != nil {
		log.Fatalf("Failed to get todos: %v", err)
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
